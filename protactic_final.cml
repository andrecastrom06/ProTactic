Domain Protactic {
	Subdomain Principal
}

ContextMap {
	contains Principal
}

BoundedContext Principal implements Principal {
	Aggregate Exemplar {
		Service EmprestimoServico {
			void realizarEmprestimo(@ExemplarId exemplar, @SocioId tomador);
			void realizarEmprestimo(@Isbn livro, @SocioId tomador);
			void devolver(@ExemplarId exemplar);
		}
		
		DomainEvent EmprestimoEvento {
			-Exemplar exemplar
		}
		
		DomainEvent EmprestimoRealizadoEvento extends EmprestimoEvento {
			-Exemplar exemplar
		}
		
		DomainEvent ExemplarDevolvidoEvento extends EmprestimoEvento {
			-Exemplar exemplar
			-Emprestimo emprestimo
		}
		
		Entity Exemplar {
			aggregateRoot

			-ExemplarId id
			-Isbn livro
			-Emprestimo emprestimo nullable

			def boolean disponivel();   // return emprestimo == null
			def boolean indisponivel(); // return emprestimo != null
			def boolean emprestado();   // return emprestimo == null

			def @EmprestimoRealizadoEvento realizarEmprestimo(@SocioId tomador);
			def @ExemplarDevolvidoEvento devolver();

			Repository ExemplarRepository {
				@Exemplar obter(@ExemplarId id); // Pode ser omitido do modelo
				List<@Exemplar> pesquisarDisponiveis(@Isbn livro);
			}
		}

		ValueObject ExemplarId {
			int id
		}

		ValueObject Emprestimo {
			-Periodo periodo
			-SocioId tomador
		}

		ValueObject Periodo {
			Date inicio
			Date fim
		}
	}
}