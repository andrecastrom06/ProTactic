Domain Protactic {}

BoundedContext Protactic implements Protactic {

	Aggregate Clube {
		Entity Clube {
			aggregateRoot

			int id;
			-Treinador treinador;
			-Analista analista;
			-Preparador preparador;
			-Competicao competicao;
			String nome;
			String cidadeEstado;
			String estadio;
			-Jogador capitao;
			List<Jogador> jogadores;
		}
	
		Entity Jogador {
			int id;
			-Contrato contrato;
			-Clube clube;
			-Competicao competicao;
			String nome;
			int idade;
			String posicao;
			String perna;
			double nota;
			int jogos;
			int gols;
			int assistencias;
			String status;
			String minutagem;
			int anosDeClube;
			boolean capitao;
			int grauDeLesao;
			boolean contratoAtivo;
		}
        
		Repository ClubeRepository {
			salvar(@Clube clube);
			buscarPorNome(String nome);
			List<Clube> listarTodos();
		}
		
		Repository JogadorRepository {
			salvar(@Jogador jogador);
			buscarPorNome(String nome);
			existe(String nome);
			List<Jogador> listarTodos();
		}
		
		Service CadastroDeAtletaService {
			contratar(@Clube clubeDestino, @Jogador jogador, boolean janelaAberta);
		}
	}
	
	Aggregate Contrato {
		Entity Contrato {
			aggregateRoot
			
			int id;
			int duracaoMeses;
			double salario;
			String status;
			-Clube clube;
		}

		Repository ContratoRepository {
            saveContrato(@Contrato contrato);
            findContratoById(int id);
            List<@Contrato> findAllContratos();
        }   
		
		Service DispensaService {
			jogadorSaudavel(@Jogador jogador);
            dispensarJogador(@Jogador jogador);
		}
		
		Service ContratacaoServico {
			registrarAtleta(@Clube clubeDestino, @Jogador jogador, boolean janelaAberta);
		}
	}
	
	Aggregate Proposta {
		Entity Proposta {
			aggregateRoot

			int id;
			-Clube propositor;
			-Clube receptor;
			-Jogador jogador;
			String status;
			double valor;
			Date data;
		}

		Repository PropostaRepository {
            saveProposta(@Proposta proposta);
            findPropostaById(int id);
            List<@Proposta> findAllPropostas();
        }
		
		Service PropostaService {
            criarProposta(@Jogador jogador, @Clube clube, Date data);
			estaDentroDaJanelaDeTransferencia(Date data);
		}
	}
	
	Aggregate Premiacao {
		Entity Premiacao {
			aggregateRoot
			
			int id;
			-Jogador jogador;
			String nome;
			Date dataPremiacao;
		}


		Repository PremiacaoRepository {
			salvar(@Premiacao premiacao);
			buscarPorId(int id);
			List<@Premiacao> listarTodos();
		}
		
		Service PremiacaoService {
			criarPremiacaoMelhorJogador(@Jogador jogadorMaiorPontuacao);
		}
	}
	
	Aggregate Competicao {
		Entity Competicao {
			aggregateRoot
			
			int id;
			String nome;
			Date dataInicio;
			Date dataFim;
		}
	}
	
	Aggregate Partida {
		Entity Partida {
			aggregateRoot
			
			int id;
			-Clube clubeCasa;
			-Clube clubeVisitante;
			Date dataJogo;
			String hora;
			int placarClubeCasa;
			int placarClubeVisitante;
		}

	}
	
	Aggregate Nota {
		Entity Nota {
			aggregateRoot
			
			int jogoId;
			String jogadorId;
			double nota;
			String observacao;
		}
		
		Repository NotaRepository {
			buscar(String jogoId, String jogadorId);
			salvar(Nota nota);
			registrarParticipacao(String jogoId, String jogadorId, boolean atuou);
			atuouNoJogo(String jogoId, String jogadorId);
			registrarJogadorNoElenco(String jogadorId);
			jogadorExisteNoElenco(String jogadorId);			
        }
		
		Service NotaService {
            atribuirNotaEObservacao(String jogoId, String jogadorId, BigDecimal nota, String observacao);
			registrarObservacao(String jogoId, String jogadorId, String observacao);
			Optional<Nota> obterRegistro(String jogoId, String jogadorId);
			registrarJogadorNoElenco(String jogadorId);
			registrarParticipacao(String jogoId, String jogadorId, boolean atuou);
        }
	}
	
	Aggregate Aptidao {
		Entity Fisico {
			aggregateRoot

			int id;
			-Jogador jogador;
			String nome;
			String musculo;
			String intensidade;
			String descricao;
			Date dataInicio;
			Date dataFim;
		}
		Entity Lesao {
			int id;
			-Jogador jogador;
			boolean lesionado;
			String tempo;
			String plano;
			int grau;
		}
		Entity Suspensao {
			int id;
			-Jogador jogador;
			boolean suspenso;
			int amarelo;
			int vermelho;
		}

	}
	
	Aggregate Usuario {
		Entity Usuario {
			aggregateRoot
			
			int id;
			String login;
			String senha;
			String nome;
		}
	}
	
	Aggregate SuporteTecnico {
		Entity Analista {}
		Entity Preparador {}
		Entity Treinador {}
		Entity Tatico {}
	}
}
