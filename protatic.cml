Domain Protactic {}


ContextMap {
    contains Protactic
}
BoundedContext Protactic implements Protactic {

	Aggregate Clube {
		Entity Clube {
			aggregateRoot
			int id;
			Integer treinadorId;
			Integer analistaId;
			Integer preparadorId;
			Integer competicaoId;
			String nome;
			String cidadeEstado;
			String estadio;
			Integer capitaoId;
			List<Integer> jogadorIds;

		}
		Entity InscricaoAtleta{
			String atleta;
			String competicao;
			Boolean elegivelParaJogos;
			Boolean inscrito;
			String mensagemErro;
			
		}

		Repository ClubeRepository {
			salvar(@Clube clube);
			buscarPorNome(String nome);
			List<@Clube> listarTodos();
			@Clube buscarPorId(Integer id);
			}
		
		Repository RegistroInscricaoRepository {
			salvar(@InscricaoAtleta inscricao);
			@InscricaoAtleta buscarPorAtletaECompeticao(Integer jogadorId, Integer competicaoId);
			List<@InscricaoAtleta> listarTodas();
			}
		
		Service RegistroInscricaoService {
    		@InscricaoAtleta registrarInscricao(Integer jogadorId, Integer competicaoId);
		}
		
		Service CadastroDeAtletaService {
			contratar(@Clube clubeDestino, @Jogador jogador, Date data);
		}
	}
	
	Aggregate Jogador {
		Entity Jogador {
			aggregateRoot
			int id;
			Integer contratoId;
			Integer clubeId;
			Integer competicaoId;
			String nome;
			int idade;
			String posicao;
			String perna;
			double nota;
			int jogos;
			int gols;
			int assistencias;
			String status;
			String minutagem;
			LocalDate chegadaNoClube;
			boolean capitao;
			int grauLesao;
			boolean contratoAtivo;
			boolean saudavel;
			double desvioPadrao;
		}

		Service CapitaoService {
			podeSerCapitao(@Jogador jogador);
			mesesNoClube(@Jogador jogador);
			definirCapitao(@Jogador jogador);
			definirCapitaoEntreJogadores(@List<Jogador> jogadores);
		 }

		Repository CapitaoRepository {
			salvarCapitao(@Jogador jogador);
			buscarCapitaoPorClube(Integer clubeId);
		}

		Repository JogadorRepository {
			salvar(@Jogador jogador);
			buscarPorNome(String nome);
			existe(String nome);
			List<@Jogador> listarTodos();
			@Jogador buscarPorId(Integer id);
		}
	}

	Aggregate Contrato {
		Entity Contrato {
			aggregateRoot
			int id;
			int duracaoMeses;
			double salario;
			String status;
			Integer clubeId;
		}

		Repository ContratoRepository {
            saveContrato(@Contrato contrato);
            findContratoById(Integer id);
            List<@Contrato> findAllContratos();
        }   
		
		Service DispensaService {
			jogadorSaudavel(@Jogador jogador);
            dispensarJogador(@Jogador jogador);
		}
		
		Service ContratacaoServico {
			registrarAtleta(@Clube clubeDestino, @Jogador jogador, boolean janelaAberta);
		}
	}
	
	Aggregate Proposta {
		Entity Proposta {
			aggregateRoot
			int id;
			Integer propositorId;
			Integer receptorId;
			Integer jogadorId;
			String status;
			double valor;
			Date data;
		}

		Repository PropostaRepository {
            saveProposta(@Proposta proposta);
            findPropostaById(Integer id);
            List<@Proposta> findAllPropostas();
        }
		
		Service PropostaService {
            criarProposta(@Jogador jogador, @Clube clube, Date data);
			estaDentroDaJanelaDeTransferencia(Date data);
		}
	}
	
	Aggregate Premiacao {
		Entity Premiacao {
			aggregateRoot
			int id;
			Integer jogadorId;
			String nome;
			Date dataPremiacao;
		}

		Repository PremiacaoRepository {
			criarPremiacao(String nomePremiacao, Date dataPremiacao);
		}
		
		Service PremiacaoService {
			definirVencedor(String nomePremiacao, Date dataPremiacao, List<@Jogador> jogadores);
		}
	}
	
	Aggregate Competicao {
		Entity Competicao {
			aggregateRoot
			int id;
			String nome;
			Date dataInicio;
			Date dataFim;
		}
	}
	
	Aggregate Partida {
		Entity Partida {
			aggregateRoot
			int id;
			Integer clubeCasaId;
			Integer clubeVisitanteId;
			Date dataJogo;
			String hora;
			int placarClubeCasa;
			int placarClubeVisitante;
		}
	}
	
	Aggregate Nota {
		Entity Nota {
			aggregateRoot
			String jogoId;
			String jogadorId;
			BigDecimal nota;
			String observacao;
		}
		
		Repository NotaRepository {
			buscar(String jogoId, String jogadorId);
			salvar(Nota nota);
			registrarParticipacao(String jogoId, String jogadorId, boolean atuou);
			atuouNoJogo(String jogoId, String jogadorId);
			registrarJogadorNoElenco(String jogadorId);
			jogadorExisteNoElenco(String jogadorId);
        }
		
		Service NotaService {
            atribuirNotaEObservacao(String jogoId, String jogadorId, BigDecimal nota, String observacao);
			registrarObservacao(String jogoId, String jogadorId, String observacao);
			Optional<Nota> obterRegistro(String jogoId, String jogadorId);
			registrarJogadorNoElenco(String jogadorId);
			registrarParticipacao(String jogoId, String jogadorId, boolean atuou);
        }
	}
	
	Aggregate Fisico {
		Entity Fisico {
			aggregateRoot
			int id;
			Integer jogadorId;
			String nome;
			String musculo;
			String intensidade;
			String descricao;
			Date dataInicio;
			Date dataFim;
		}

		Entity Lesao {
			int id;
			Integer jogadorId;
			boolean lesionado;
			String tempo;
			String plano;
			int grau;
		}
    }

	Aggregate Suspensao {
		Entity Suspensao {
			aggregateRoot
			int id;
			Integer jogadorId;
			boolean suspenso;
			int amarelo;
			int vermelho;
		}

		Entity RegistroCartao {
        	int id;
        	Integer jogadorId;
        	String tipo;
    	}

		Repository RegistroCartoesRepository {
			salvarCartao(@RegistroCartao cartao);
			List<@RegistroCartao> buscarCartoesPorAtleta(String atleta);
			limparCartoes(@String atleta);
		}

		Service RegistroCartoesService {
			registrarCartao(@Jogador jogador, String tipo);
			verificarSuspensao(@Jogador jogador);
			limparCartoes(@Jogador jogador);
		}
	}
	
	Aggregate Usuario {
		Entity Usuario {
			aggregateRoot
			int id;
			String login;
			String senha;
			String nome;
		}
	}
	
	Aggregate Treinador {
		Entity Treinador { aggregateRoot int id; }
	}
    Aggregate Analista {
        Entity Analista { aggregateRoot int id; }
    }
    Aggregate Preparador {
        Entity Preparador { aggregateRoot int id; }
    }
    Aggregate Tatico {
        Entity Tatico { aggregateRoot int id; }
    }

	Aggregate Escalacao {
		Entity Escalacao {
			aggregateRoot
			int id;
			Integer partidaId;
			String esquema;
			List<Integer> jogadorIds;
		}
	}

	Aggregate SessaoTreino {
		Entity SessaoTreino {
			aggregateRoot
			String nome;
			Integer partidaId;
			List<Integer> convocadosIds;
		}

		Service SessaoTreinoService {
			criarSessao(String nome, Integer partidaId, List<Integer> jogadorIds);
			List<@SessaoTreino> listarSessoesPorPartida(String partidaNome);
		}

		Repository SessaoTreinoRepository {
			salvar(@SessaoTreino sessao);
    		List<@SessaoTreino> listarPorPartida(String partidaNome);
		}
	}

    Aggregate PlanejamentoCargaSemanal {
        Entity TreinoSemanal {
            aggregateRoot
            int id;
            Integer jogadorId;
            boolean registrado;
        }

        Repository PlanejamentoCargaSemanalRepository {
            salvarTreino(@TreinoSemanal treino);
            buscarPorJogador(String nomeJogador);
        }

        Service PlanejamentoCargaSemanalService {
            registrarTreino(@Jogador jogador);
        }
    }
}
